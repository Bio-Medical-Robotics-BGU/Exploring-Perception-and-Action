The included codes are as follows:

To get the responses predicted by the models for each participant:
  1. ModelFeatureExtraction (MATLAB code) - takes the participant data, preprocesses and computes the features for the models. 
  2. Models (Python code) - uses the computed features in the "ModelFeatureExtraction" code and creates the model answers for each participant in each trial.

To get the responses predicted by the logistic regression for each participant:
  1. CreateDatasetsLogisticRegression (Python code) - creates the training and test datasets for the logistic regression model.
  2. LogisticRegression (Python code) - runs in a loop over the 10 folds, trains and gets the predictions of the logistic regression model for each participant
     in each trial.

To get the responses predicted by the neural networks for each participant:
  1. Preprocessing (MATLAB code) - takes the participant data and performs the preprocessing described in the manuscript. 
  2. Create10Folds (Python code) - splits the participants into training and test data for each of the 10 folds in the k-fold validation. 
  3. CreateDatasetsForEachFold (Python code) - creates the training and test datasets for each fold based on the division in the "Create10Folds" code.

  4. The neural network code options are as follows:
    a. NeuralNetwork (Python code) - runs in a loop over all 10 folds, trains the networks and gets the predicted responses for each test participant in the 
       test data for that fold. This is all repeated in a loop five times to ensure consistency and no effect of the random seed.
       In this code, the user can choose which signals should be included (any combination of position, velocity, acceleration and grip force).
    b. NeuralNetworkAblation (Python code) - runs in a loop over all 10 folds, trains the networks and gets the predicted responses for each test participant in the 
       test data for that fold. This is all repeated in a loop five times to ensure consistency and no effect of the random seed.
       In this code, the user can choose which parts of the network should be included (Block #1, Block #1 + last LSTM layer, Block #1 + attention + last LSTM layer
       or full model).
    c. NeuralNetworkNeg (Python code) - runs in a loop over all 10 folds, trains the networks and gets the predicted responses for each test participant in the 
       test data for that fold. This is all repeated in a loop five times to ensure consistency and no effect of the random seed.
       In this code, all the participants (including the four negative-effect participants) are included. The user can choose if the negative stretch session is 
       included or not.

